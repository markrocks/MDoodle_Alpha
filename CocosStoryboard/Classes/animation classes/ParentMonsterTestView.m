//
// ParentMonsterTestView.m
// Generated by Core Animator version 1.0.3 on 3/26/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "ParentMonsterTestView.h"

@interface ParentMonsterTestView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation ParentMonsterTestView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,126,136)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 126, 136);
	__scaling__.center = CGPointMake(63.3, 68.3);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *kidHead = [UIImageView new];
	kidHead.bounds = CGRectMake(0, 0, 66.0, 69.0);
	UIImage *imgKidHead = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"kid head.png" ofType:nil]];
	kidHead.image = imgKidHead;
	kidHead.contentMode = UIViewContentModeCenter;
	kidHead.layer.position = CGPointMake(40.000, 92.000);
	[__scaling__ addSubview:kidHead];
	viewsByName[@"kid head"] = kidHead;

	UIImageView *tooth = [UIImageView new];
	tooth.bounds = CGRectMake(0, 0, 9.0, 7.0);
	UIImage *imgTooth = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"tooth.png" ofType:nil]];
	tooth.image = imgTooth;
	tooth.contentMode = UIViewContentModeCenter;
	tooth.layer.position = CGPointMake(52.000, 81.000);
	[__scaling__ addSubview:tooth];
	viewsByName[@"tooth"] = tooth;

	UIImageView *mouth = [UIImageView new];
	mouth.bounds = CGRectMake(0, 0, 32.0, 30.0);
	UIImage *imgMouth = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"mouth.png" ofType:nil]];
	mouth.image = imgMouth;
	mouth.contentMode = UIViewContentModeCenter;
	mouth.layer.position = CGPointMake(44.000, 88.000);
	[__scaling__ addSubview:mouth];
	viewsByName[@"mouth"] = mouth;

	UIImageView *pupil = [UIImageView new];
	pupil.bounds = CGRectMake(0, 0, 10.0, 10.0);
	UIImage *imgPupil = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"pupil.png" ofType:nil]];
	pupil.image = imgPupil;
	pupil.contentMode = UIViewContentModeCenter;
	pupil.layer.position = CGPointMake(43.000, 88.000);
	[__scaling__ addSubview:pupil];
	viewsByName[@"pupil"] = pupil;

	UIImageView *rightHorn = [UIImageView new];
	rightHorn.bounds = CGRectMake(0, 0, 42.0, 49.0);
	UIImage *imgRightHorn = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"right horn.png" ofType:nil]];
	rightHorn.image = imgRightHorn;
	rightHorn.contentMode = UIViewContentModeCenter;
	rightHorn.layer.position = CGPointMake(86.000, 106.000);
	[__scaling__ addSubview:rightHorn];
	viewsByName[@"right horn"] = rightHorn;

	UIImageView *leftHorn = [UIImageView new];
	leftHorn.bounds = CGRectMake(0, 0, 53.0, 45.0);
	UIImage *imgLeftHorn = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"left horn.png" ofType:nil]];
	leftHorn.image = imgLeftHorn;
	leftHorn.contentMode = UIViewContentModeCenter;
	leftHorn.layer.position = CGPointMake(28.000, 43.000);
	[__scaling__ addSubview:leftHorn];
	viewsByName[@"left horn"] = leftHorn;

	UIImageView *parent = [UIImageView new];
	parent.bounds = CGRectMake(0, 0, 121.0, 129.0);
	UIImage *imgParent = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"parent.png" ofType:nil]];
	parent.image = imgParent;
	parent.contentMode = UIViewContentModeCenter;
	parent.layer.position = CGPointMake(62.000, 66.000);
	[__scaling__ addSubview:parent];
	viewsByName[@"parent"] = parent;

	UIImageView *parent1 = [UIImageView new];
	parent1.bounds = CGRectMake(0, 0, 121.0, 129.0);
	parent1.image = imgParent;
	parent1.contentMode = UIViewContentModeCenter;
	parent1.layer.position = CGPointMake(62.000, 66.000);
	[__scaling__ addSubview:parent1];
	viewsByName[@"parent 1"] = parent1;

	UIImageView *leftHand = [UIImageView new];
	leftHand.bounds = CGRectMake(0, 0, 19.0, 19.0);
	UIImage *imgLeftHand = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"left hand.png" ofType:nil]];
	leftHand.image = imgLeftHand;
	leftHand.contentMode = UIViewContentModeCenter;
	leftHand.layer.position = CGPointMake(49.000, 64.000);
	[__scaling__ addSubview:leftHand];
	viewsByName[@"left hand"] = leftHand;

	UIImageView *rightHand = [UIImageView new];
	rightHand.bounds = CGRectMake(0, 0, 19.0, 18.0);
	UIImage *imgRightHand = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"right hand.png" ofType:nil]];
	rightHand.image = imgRightHand;
	rightHand.contentMode = UIViewContentModeCenter;
	rightHand.layer.position = CGPointMake(69.000, 82.000);
	[__scaling__ addSubview:rightHand];
	viewsByName[@"right hand"] = rightHand;

	self.viewsByName = viewsByName;
}

#pragma mark - Frank

- (void)addFrankAnimation
{
	[self addFrankAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addFrankAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addFrankAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addFrankAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addFrankAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addFrankAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addFrankAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addFrankAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];
	CAMediaTimingFunction *easeOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 1.625;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"Frank"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"Frank"]];
	}

	CAKeyframeAnimation *pupilTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	pupilTranslationXAnimation.duration = 1.625;
	pupilTranslationXAnimation.values = @[@(28.000), @(9.768), @(9.768), @(0.126), @(-0.578), @(-5.282), @(-7.987), @(-1.904), @(0.000)];
	pupilTranslationXAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(0.646), @(0.692), @(0.738), @(0.785), @(0.846), @(1.000)];
	pupilTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, easeOutTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	pupilTranslationXAnimation.beginTime = beginTime;
	pupilTranslationXAnimation.fillMode = fillMode;
	pupilTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"pupil"] layer] addAnimation:pupilTranslationXAnimation forKey:@"Frank_TranslationX"];

	CAKeyframeAnimation *pupilTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	pupilTranslationYAnimation.duration = 1.625;
	pupilTranslationYAnimation.values = @[@(-28.000), @(-9.719), @(-9.719), @(0.000), @(4.700), @(3.400), @(1.100), @(2.592), @(0.000)];
	pupilTranslationYAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(0.646), @(0.692), @(0.738), @(0.785), @(0.846), @(1.000)];
	pupilTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, easeOutTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	pupilTranslationYAnimation.beginTime = beginTime;
	pupilTranslationYAnimation.fillMode = fillMode;
	pupilTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"pupil"] layer] addAnimation:pupilTranslationYAnimation forKey:@"Frank_TranslationY"];

	CAKeyframeAnimation *mouthTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	mouthTranslationXAnimation.duration = 1.625;
	mouthTranslationXAnimation.values = @[@(28.000), @(12.076), @(12.076), @(0.000)];
	mouthTranslationXAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	mouthTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	mouthTranslationXAnimation.beginTime = beginTime;
	mouthTranslationXAnimation.fillMode = fillMode;
	mouthTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"mouth"] layer] addAnimation:mouthTranslationXAnimation forKey:@"Frank_TranslationX"];

	CAKeyframeAnimation *mouthTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	mouthTranslationYAnimation.duration = 1.625;
	mouthTranslationYAnimation.values = @[@(-28.000), @(-12.076), @(-12.076), @(0.000)];
	mouthTranslationYAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	mouthTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	mouthTranslationYAnimation.beginTime = beginTime;
	mouthTranslationYAnimation.fillMode = fillMode;
	mouthTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"mouth"] layer] addAnimation:mouthTranslationYAnimation forKey:@"Frank_TranslationY"];

	CAKeyframeAnimation *toothTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toothTranslationXAnimation.duration = 1.625;
	toothTranslationXAnimation.values = @[@(28.000), @(11.992), @(11.992), @(0.000)];
	toothTranslationXAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	toothTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	toothTranslationXAnimation.beginTime = beginTime;
	toothTranslationXAnimation.fillMode = fillMode;
	toothTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tooth"] layer] addAnimation:toothTranslationXAnimation forKey:@"Frank_TranslationX"];

	CAKeyframeAnimation *toothTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	toothTranslationYAnimation.duration = 1.625;
	toothTranslationYAnimation.values = @[@(-28.000), @(-12.076), @(-12.076), @(0.000)];
	toothTranslationYAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	toothTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	toothTranslationYAnimation.beginTime = beginTime;
	toothTranslationYAnimation.fillMode = fillMode;
	toothTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tooth"] layer] addAnimation:toothTranslationYAnimation forKey:@"Frank_TranslationY"];

	CAKeyframeAnimation *kidHeadTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	kidHeadTranslationXAnimation.duration = 1.625;
	kidHeadTranslationXAnimation.values = @[@(28.000), @(11.992), @(11.992), @(0.000)];
	kidHeadTranslationXAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	kidHeadTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	kidHeadTranslationXAnimation.beginTime = beginTime;
	kidHeadTranslationXAnimation.fillMode = fillMode;
	kidHeadTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"kid head"] layer] addAnimation:kidHeadTranslationXAnimation forKey:@"Frank_TranslationX"];

	CAKeyframeAnimation *kidHeadTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	kidHeadTranslationYAnimation.duration = 1.625;
	kidHeadTranslationYAnimation.values = @[@(-28.000), @(-12.034), @(-12.034), @(0.000)];
	kidHeadTranslationYAnimation.keyTimes = @[@(0.000), @(0.246), @(0.262), @(1.000)];
	kidHeadTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, overshootTiming];
	kidHeadTranslationYAnimation.beginTime = beginTime;
	kidHeadTranslationYAnimation.fillMode = fillMode;
	kidHeadTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"kid head"] layer] addAnimation:kidHeadTranslationYAnimation forKey:@"Frank_TranslationY"];

	CAKeyframeAnimation *leftHornRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	leftHornRotationAnimation.duration = 1.625;
	leftHornRotationAnimation.values = @[@(0.000), @(0.001), @(-0.133), @(0.419), @(0.000), @(0.000)];
	leftHornRotationAnimation.keyTimes = @[@(0.000), @(0.354), @(0.385), @(0.415), @(0.462), @(1.000)];
	leftHornRotationAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	leftHornRotationAnimation.beginTime = beginTime;
	leftHornRotationAnimation.fillMode = fillMode;
	leftHornRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"left horn"] layer] addAnimation:leftHornRotationAnimation forKey:@"Frank_Rotation"];

	CAKeyframeAnimation *leftHornTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	leftHornTranslationXAnimation.duration = 1.625;
	leftHornTranslationXAnimation.values = @[@(0.000), @(0.800), @(1.000), @(4.964), @(0.000), @(0.000)];
	leftHornTranslationXAnimation.keyTimes = @[@(0.000), @(0.354), @(0.385), @(0.415), @(0.462), @(1.000)];
	leftHornTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	leftHornTranslationXAnimation.beginTime = beginTime;
	leftHornTranslationXAnimation.fillMode = fillMode;
	leftHornTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"left horn"] layer] addAnimation:leftHornTranslationXAnimation forKey:@"Frank_TranslationX"];

	CAKeyframeAnimation *leftHornTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	leftHornTranslationYAnimation.duration = 1.625;
	leftHornTranslationYAnimation.values = @[@(0.000), @(0.000), @(4.000), @(-3.145), @(0.000), @(0.000)];
	leftHornTranslationYAnimation.keyTimes = @[@(0.000), @(0.354), @(0.385), @(0.415), @(0.462), @(1.000)];
	leftHornTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	leftHornTranslationYAnimation.beginTime = beginTime;
	leftHornTranslationYAnimation.fillMode = fillMode;
	leftHornTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"left horn"] layer] addAnimation:leftHornTranslationYAnimation forKey:@"Frank_TranslationY"];
}

- (void)removeFrankAnimation
{
	[self.layer removeAnimationForKey:@"Frank"];
	[[self.viewsByName[@"pupil"] layer] removeAnimationForKey:@"Frank_TranslationX"];
	[[self.viewsByName[@"pupil"] layer] removeAnimationForKey:@"Frank_TranslationY"];
	[[self.viewsByName[@"mouth"] layer] removeAnimationForKey:@"Frank_TranslationX"];
	[[self.viewsByName[@"mouth"] layer] removeAnimationForKey:@"Frank_TranslationY"];
	[[self.viewsByName[@"tooth"] layer] removeAnimationForKey:@"Frank_TranslationX"];
	[[self.viewsByName[@"tooth"] layer] removeAnimationForKey:@"Frank_TranslationY"];
	[[self.viewsByName[@"kid head"] layer] removeAnimationForKey:@"Frank_TranslationX"];
	[[self.viewsByName[@"kid head"] layer] removeAnimationForKey:@"Frank_TranslationY"];
	[[self.viewsByName[@"left horn"] layer] removeAnimationForKey:@"Frank_Rotation"];
	[[self.viewsByName[@"left horn"] layer] removeAnimationForKey:@"Frank_TranslationX"];
	[[self.viewsByName[@"left horn"] layer] removeAnimationForKey:@"Frank_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"Frank"];
}

@end