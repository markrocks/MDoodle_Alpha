//
// CrazymanView.m
// Generated by Core Animator version 1.0.3 on 3/20/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "CrazymanView.h"

@interface CrazymanView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation CrazymanView

#pragma mark - Life Cycle

UIImageView *animationImageView;

- (instancetype)init
{
	
        return [self initWithFrame:CGRectMake(0,0,243,416)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
    NSArray *imageNames = @[@"win_1.png", @"win_2.png", @"win_3.png", @"win_4.png",
                            @"win_5.png", @"win_6.png", @"win_7.png", @"win_8.png",
                            @"win_9.png", @"win_10.png", @"win_11.png", @"win_12.png",
                            @"win_13.png", @"win_14.png", @"win_15.png", @"win_16.png"];
    
    NSMutableArray *images = [[NSMutableArray alloc] init];
    for (int i = 0; i < imageNames.count; i++) {
        [images addObject:[UIImage imageNamed:[imageNames objectAtIndex:i]]];
    }
    
    animationImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0,0,243,416)];
    animationImageView.animationImages = images;
    animationImageView.animationDuration = 0.5;

    //
    self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 243, 416);
	__scaling__.center = CGPointMake(121.6, 208.1);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	//UIImageView *win1 = [UIImageView new];
	//win1.bounds = CGRectMake(0, 0, 86.0, 193.0);
	//UIImage *imgWin1 = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"win_1.png" ofType:nil]];
	//win1.image = imgWin1;
	animationImageView.contentMode = UIViewContentModeCenter;
	animationImageView.layer.position = CGPointMake(121.621, 208.103);
	[__scaling__ addSubview:animationImageView];
	viewsByName[@"win_1"] = animationImageView;

	self.viewsByName = viewsByName;
}

#pragma mark - Untitled Animation

- (void)addUntitledAnimation
{
	[self addUntitledAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addUntitledAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addUntitledAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addUntitledAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addUntitledAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addUntitledAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addUntitledAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addUntitledAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 2.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"UntitledAnimation"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"UntitledAnimation"]];
	}
    
    [animationImageView startAnimating];

	CAKeyframeAnimation *win1RotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	win1RotationAnimation.duration = 2.500;
	win1RotationAnimation.values = @[@(0.000), @(0.000)];
	win1RotationAnimation.keyTimes = @[@(0.000), @(1.000)];
	win1RotationAnimation.timingFunctions = @[linearTiming];
	win1RotationAnimation.beginTime = beginTime;
	win1RotationAnimation.fillMode = fillMode;
	win1RotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"win_1"] layer] addAnimation:win1RotationAnimation forKey:@"Untitled Animation_Rotation"];

	CAKeyframeAnimation *win1OpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	win1OpacityAnimation.duration = 2.500;
	win1OpacityAnimation.values = @[@(1.000), @(0.099)];
	win1OpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	win1OpacityAnimation.timingFunctions = @[linearTiming];
	win1OpacityAnimation.beginTime = beginTime;
	win1OpacityAnimation.fillMode = fillMode;
	win1OpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"win_1"] layer] addAnimation:win1OpacityAnimation forKey:@"Untitled Animation_Opacity"];

	CAKeyframeAnimation *win1ScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	win1ScaleXAnimation.duration = 2.500;
	win1ScaleXAnimation.values = @[@(1.000), @(4.000)];
	win1ScaleXAnimation.keyTimes = @[@(0.000), @(1.000)];
	win1ScaleXAnimation.timingFunctions = @[linearTiming];
	win1ScaleXAnimation.beginTime = beginTime;
	win1ScaleXAnimation.fillMode = fillMode;
	win1ScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"win_1"] layer] addAnimation:win1ScaleXAnimation forKey:@"Untitled Animation_ScaleX"];

	CAKeyframeAnimation *win1ScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	win1ScaleYAnimation.duration = 2.500;
	win1ScaleYAnimation.values = @[@(1.000), @(4.000)];
	win1ScaleYAnimation.keyTimes = @[@(0.000), @(1.000)];
	win1ScaleYAnimation.timingFunctions = @[linearTiming];
	win1ScaleYAnimation.beginTime = beginTime;
	win1ScaleYAnimation.fillMode = fillMode;
	win1ScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"win_1"] layer] addAnimation:win1ScaleYAnimation forKey:@"Untitled Animation_ScaleY"];
}

- (void)removeUntitledAnimation
{
	[self.layer removeAnimationForKey:@"UntitledAnimation"];
	[[self.viewsByName[@"win_1"] layer] removeAnimationForKey:@"Untitled Animation_Rotation"];
	[[self.viewsByName[@"win_1"] layer] removeAnimationForKey:@"Untitled Animation_Opacity"];
	[[self.viewsByName[@"win_1"] layer] removeAnimationForKey:@"Untitled Animation_ScaleX"];
	[[self.viewsByName[@"win_1"] layer] removeAnimationForKey:@"Untitled Animation_ScaleY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"UntitledAnimation"];
}

@end