//
// MonsterView.m
// Generated by Core Animator version 1.0.3 on 3/18/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "MonsterView.h"

@interface MonsterView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation MonsterView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,2048,1536)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 2048, 1536);
	__scaling__.center = CGPointMake(1024.0, 768.0);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIView *untitled = [UIView new];
	untitled.bounds = CGRectMake(0, 0, 4997.1, 3747.8);
	untitled.layer.position = CGPointMake(1019.331, 764.498);
	untitled.transform = CGAffineTransformMakeScale(0.41, 0.41);
	[__scaling__ addSubview:untitled];
	viewsByName[@"Untitled"] = untitled;

	UIImageView *toothless = [UIImageView new];
	toothless.bounds = CGRectMake(0, 0, 1024.0, 768.0);
	UIImage *imgToothless = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"toothless.png" ofType:nil]];
	toothless.image = imgToothless;
	toothless.contentMode = UIViewContentModeCenter;
	toothless.layer.position = CGPointMake(2498.560, 1873.920);
	toothless.transform = CGAffineTransformMakeScale(4.88, 4.88);
	[untitled addSubview:toothless];
	viewsByName[@"toothless"] = toothless;

	UIImageView *tongue = [UIImageView new];
	tongue.bounds = CGRectMake(0, 0, 233.0, 238.0);
	tongue.layer.anchorPoint = CGPointMake(0.744, 0.156);
	UIImage *imgTongue = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"tongue.png" ofType:nil]];
	tongue.image = imgTongue;
	tongue.contentMode = UIViewContentModeCenter;
	tongue.layer.position = CGPointMake(2208.458, 2410.843);
	tongue.transform = CGAffineTransformMakeScale(4.88, 4.88);
	[untitled addSubview:tongue];
	viewsByName[@"tongue"] = tongue;

	self.viewsByName = viewsByName;
}

#pragma mark - t1

- (void)addT1Animation
{
	[self addT1AnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addT1AnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addT1AnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addT1AnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addT1AnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addT1AnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addT1AnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addT1AnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
	CAMediaTimingFunction *overshootTiming = [CAMediaTimingFunction functionWithControlPoints:0.00 :0.00 :0.58 :1.30];
	CAMediaTimingFunction *anticipateTiming = [CAMediaTimingFunction functionWithControlPoints:0.42 :-0.30 :1.00 :1.00];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 1.750;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"T1"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"T1"]];
	}

	CAKeyframeAnimation *untitledTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	untitledTranslationXAnimation.duration = 1.750;
	untitledTranslationXAnimation.values = @[@(3.464), @(3.464)];
	untitledTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	untitledTranslationXAnimation.timingFunctions = @[linearTiming];
	untitledTranslationXAnimation.beginTime = beginTime;
	untitledTranslationXAnimation.fillMode = fillMode;
	untitledTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Untitled"] layer] addAnimation:untitledTranslationXAnimation forKey:@"t1_TranslationX"];

	CAKeyframeAnimation *untitledTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	untitledTranslationYAnimation.duration = 1.750;
	untitledTranslationYAnimation.values = @[@(-3.932), @(-3.932)];
	untitledTranslationYAnimation.keyTimes = @[@(0.000), @(1.000)];
	untitledTranslationYAnimation.timingFunctions = @[linearTiming];
	untitledTranslationYAnimation.beginTime = beginTime;
	untitledTranslationYAnimation.fillMode = fillMode;
	untitledTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Untitled"] layer] addAnimation:untitledTranslationYAnimation forKey:@"t1_TranslationY"];

	CAKeyframeAnimation *tongueRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	tongueRotationAnimation.duration = 1.750;
	tongueRotationAnimation.values = @[@(0.000), @(0.503), @(-0.569), @(-0.569)];
	tongueRotationAnimation.keyTimes = @[@(0.000), @(0.286), @(0.714), @(1.000)];
	tongueRotationAnimation.timingFunctions = @[easeInOutTiming, overshootTiming, linearTiming];
	tongueRotationAnimation.beginTime = beginTime;
	tongueRotationAnimation.fillMode = fillMode;
	tongueRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tongue"] layer] addAnimation:tongueRotationAnimation forKey:@"t1_Rotation"];

	CAKeyframeAnimation *tongueScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	tongueScaleXAnimation.duration = 1.750;
	tongueScaleXAnimation.values = @[@(4.880), @(4.000), @(4.880), @(4.880)];
	tongueScaleXAnimation.keyTimes = @[@(0.000), @(0.514), @(0.714), @(1.000)];
	tongueScaleXAnimation.timingFunctions = @[anticipateTiming, overshootTiming, linearTiming];
	tongueScaleXAnimation.beginTime = beginTime;
	tongueScaleXAnimation.fillMode = fillMode;
	tongueScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tongue"] layer] addAnimation:tongueScaleXAnimation forKey:@"t1_ScaleX"];

	CAKeyframeAnimation *tongueScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	tongueScaleYAnimation.duration = 1.750;
	tongueScaleYAnimation.values = @[@(4.880), @(4.000), @(4.880), @(4.880)];
	tongueScaleYAnimation.keyTimes = @[@(0.000), @(0.514), @(0.714), @(1.000)];
	tongueScaleYAnimation.timingFunctions = @[anticipateTiming, overshootTiming, linearTiming];
	tongueScaleYAnimation.beginTime = beginTime;
	tongueScaleYAnimation.fillMode = fillMode;
	tongueScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tongue"] layer] addAnimation:tongueScaleYAnimation forKey:@"t1_ScaleY"];

	CAKeyframeAnimation *tongueTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	tongueTranslationXAnimation.duration = 1.750;
	tongueTranslationXAnimation.values = @[@(22.113), @(75.780), @(1057.795), @(1057.795)];
	tongueTranslationXAnimation.keyTimes = @[@(0.000), @(0.286), @(0.714), @(1.000)];
	tongueTranslationXAnimation.timingFunctions = @[anticipateTiming, overshootTiming, linearTiming];
	tongueTranslationXAnimation.beginTime = beginTime;
	tongueTranslationXAnimation.fillMode = fillMode;
	tongueTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tongue"] layer] addAnimation:tongueTranslationXAnimation forKey:@"t1_TranslationX"];

	CAKeyframeAnimation *tongueTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	tongueTranslationYAnimation.duration = 1.750;
	tongueTranslationYAnimation.values = @[@(98.937), @(65.295), @(116.676), @(116.676)];
	tongueTranslationYAnimation.keyTimes = @[@(0.000), @(0.286), @(0.714), @(1.000)];
	tongueTranslationYAnimation.timingFunctions = @[anticipateTiming, overshootTiming, linearTiming];
	tongueTranslationYAnimation.beginTime = beginTime;
	tongueTranslationYAnimation.fillMode = fillMode;
	tongueTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"tongue"] layer] addAnimation:tongueTranslationYAnimation forKey:@"t1_TranslationY"];
}

- (void)removeT1Animation
{
	[self.layer removeAnimationForKey:@"T1"];
	[[self.viewsByName[@"Untitled"] layer] removeAnimationForKey:@"t1_TranslationX"];
	[[self.viewsByName[@"Untitled"] layer] removeAnimationForKey:@"t1_TranslationY"];
	[[self.viewsByName[@"tongue"] layer] removeAnimationForKey:@"t1_Rotation"];
	[[self.viewsByName[@"tongue"] layer] removeAnimationForKey:@"t1_ScaleX"];
	[[self.viewsByName[@"tongue"] layer] removeAnimationForKey:@"t1_ScaleY"];
	[[self.viewsByName[@"tongue"] layer] removeAnimationForKey:@"t1_TranslationX"];
	[[self.viewsByName[@"tongue"] layer] removeAnimationForKey:@"t1_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"T1"];
}

@end